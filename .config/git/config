[core]
    bare = false
    filemode = true
    logallrefupdates = true
    repositoryformatversion = 0
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
[user]
    name = Vlad Doster
    email = mvdoster@gmail.com
    username = vladdoster
[credential]
    helper = cache --timeout=28800
[color]
    ui = auto
[color "branch"]
    current = yellow bold
    local = green bold
    remote = cyan bold
[color "diff"]
    frag = magenta bold
    meta = yellow bold
    new = green bold
    old = red bold
    whitespace = red reverse
[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red bold
[apply]
    whitespace = strip
    whitespace = nowarn
[push]
    default = simple
[pull]
    rebase = false
[alias]
##-- ADD --##
    a = add
    au = add -u
    aa = add --all
    ai = add -i

##-- BRANCH --##
    b = branch
    ba = branch -a
    bd = branch -d
    bdd = branch -D
    br = branch -r
    bc = rev-parse --abbrev-ref HEAD
    bu = !git rev-parse --abbrev-ref --symbolic-full-name "@{u}"
    bs = !git-branch-status

##-- COMMIT --##
    c = commit
    cma = commit -a
    cm = commit -m
    cam = commit -am
    cem = commit --allow-empty -m
    cd = commit --amend
    cad = commit -a --amend
    ced = commit --allow-empty --amend

##-- CHECKOUT --##
    co = checkout
    com = checkout master
    cob = checkout -b
    copr = !sh -c 'git fo pull/$1/head:pr-$1 && git o pr-$1'

##-- PUSH --##
    p = push
    ps = push
    psf = push -f
    psu = push -u

    pst = push --tags
    pso = push origin
    psao = push --all origin
    psfo = push -f origin
    psuo = push -u origin

    psom = push origin master
    psaom = push --all origin master
    psfom = push -f origin master
    psuom = push -u origin master
    psoc = !git push origin $(git bc)
    psaoc = !git push --all origin $(git bc)
    psfoc = !git push -f origin $(git bc)
    psuoc = !git push -u origin $(git bc)
    psdc = !git push origin :$(git bc)

##-- PULL --##
    pu = pull
    pur = pull --rebase

    plo = pull origin
    pbo = pull --rebase origin
    plom = pull origin master
    ploc = !git pull origin $(git bc)
    pbom = pull --rebase origin master
    pboc = !git pull --rebase origin $(git bc)

    plu = pull upstream
    plum = pull upstream master
    pluc = !git pull upstream $(git bc)
    pbum = pull --rebase upstream master
    pbuc = !git pull --rebase upstream $(git bc)

##-- CLONE --##
    cl = clone
    cld = clone --depth 1
    clg = !sh -c 'git clone git://github.com/$1 $(basename $1)' -
    clgp = !sh -c 'git clone git@github.com:$1 $(basename $1)' -
    clgu = !sh -c 'git clone git@github.com:$(git config --get user.username)/$1 $1' -

##-- CHERRY PICK --##
    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue

##-- DIFF --##
    df-cache = diff --cached
    df-stage = diff --staged
    df-word = diff --word-diff
    df-dir = diff --check --dirstat --find-copies --find-renames --histogram --color
    df-all = !"for name in $(git diff --name-only $1); do git difftool $1 $name & done"
    df-changes = diff --name-status -r
    df-stat = diff --stat --ignore-space-change -r
    df-staged = diff --cached

##-- FETCH --##
    f = fetch
    fo = fetch origin
    fu = fetch upstream

##-- Prepare patches for e-mail submission --##
    fp = format-patch

##-- FILE SYSTEM CONSISTENCY CHECK --##
    fk = fsck

##-- GREP -- #
    grep = grep -Ii
    gr = grep -Ii
  # Grep from repository root
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
  # Find text in any commit ever.
    grep-all = !"f() { git rev-list --all | xargs git grep \"$@\"; }; f"
  # Find text and group the output lines. A.k.a. `gg`.
    grep-group = grep --break --heading --line-number --color
  # Grep with ack-like formatting
    grep-ack = \
    -c color.grep.linenumber=\"bold yellow\" \
    -c color.grep.filename=\"bold green\" \
    -c color.grep.match=\"reverse yellow\" \
    grep --break --heading --line-number

##-- LOG --##
  # log with items appearing in topological order, i.e. descendant commits are shown before their parents.
    lt = log --topo-order
    ll = log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'
    lll = log --graph --topo-order --date=iso8601-strict --no-abbrev-commit --abbrev=40 --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn <%ce>]%Creset %Cblue%G?%Creset'

##-- Show information about files in the index and the working tree --##
    ls = ls-files
    lsf = !git ls-files | grep -i

##-- MERGE --##
    m = merge
    ma = merge --abort
    mc = merge --continue
    ms = merge --skip

##-- REBASE --##
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = rebase --interactive
    rbs = rebase --skip

##-- RESET --##
    re = reset
    rh = reset HEAD
    reh = reset --hard
    rem = reset --mixed
    res = reset --soft
    rehh = reset --hard HEAD
    remh = reset --mixed HEAD
    resh = reset --soft HEAD
    rehom = reset --hard origin/master

##-- REMOTE --##
    rr = remote
    rrs = remote show
    rru = remote update
    rrp = remote prune
    incoming = !git remote update --prune; git log ..@{upstream}
    outgoing = log @{upstream}..
    push-to-all-remotes = !git remote | xargs -I% -n1 git push %

##-- REFLOG --##
    rl = reflog

##-- RM --##
    rmf = rm -f
    rmrf = rm -r -f

##-- STATUS --##
    s = status -uno
    sb = status -s -b

##-- STASH THE CHANGES IN A DIRTY WORKING DIRECTORY AWAY --##
    sa = stash apply
    sc = stash clear
    sd = stash drop
    sl = stash list
    sp = stash pop
    ss = stash save
    ssk = stash save -k
    sw = stash show

##-- CREATE/DELETE A TAG OBJECT --##
    t = tag
    td = tag -d

##-- PRUNING --##
    pr = prune -v
    prune-all = !git remote | xargs -n 1 git remote prune

##-- SHOW VARIOUS TYPES OF OBJECTS --##
    w = show
    wp = show -p
    wr = show -p --no-color

##-- Initialize, update or inspect submodules --##
    subadd = !sh -c 'git submodule add git://github.com/$1 $2/$(basename $1)' -
    subrm = !sh -c 'git submodule deinit -f -- $1 && rm -rf .git/modules/$1 && git rm -f $1' -
    subup = submodule update --init --recursive
    subpull = !git submodule foreach git pull --tags origin master

##-- REGISTER FILE CONTENTS IN THE WORKING TREE TO THE INDEX --##
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = !git ls -v | grep ^h | cut -c 3-
    unassumeall = !git assumed | xargs git unassume
    assumeall = !git status -s | awk {'print $2'} | xargs git assume

##-- LOOKUPS --##
  # Given a string for an author, try to figure out full name and email:
    whois = "!sh -c 'git log --regexp-ignore-case -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
  # Given any git object, try to show it briefly
    whatis = show --no-patch --pretty='tformat:%h (%s, %ad)' --date=short
  # Show who contributed with summarized changes
    who = shortlog --summary --
  # Show who contributed, in descending order by number of commits
    whorank = shortlog --summary --numbered --no-merges
  # Search commits
    searchcommits = !"f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

##-- EDITING AND ADDING CONFLICTED FILES --##
  edit-unmerged = !"f() { git ls-files --unmerged | cut -f2 | sort -u ; }; `git var GIT_EDITOR` `f`"
  add-unmerged  = !"f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

##-- MISC. --##
    aliases = !git config -l | grep alias | cut -c 7-
    bump = !sh -c 'git commit -am \"Version bump v$1\" && git psuoc && git release $1' -
    release = !sh -c 'git tag v$1 && git pst' -
    unrelease = !sh -c 'git tag -d v$1 && git pso :v$1' -
    merged = !sh -c 'git o master && git plom && git bd $1 && git rpo' -
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
    snap = !git stash save 'snapshot: $(date)' && git stash apply 'stash@{0}'
    bare = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
    whois = !sh -c 'git log -i -1 --author=\"$1\" --pretty=\"format:%an <%ae>\"' -
    serve = daemon --reuseaddr --verbose --base-path=. --export-all ./.git
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
    subrepo = !sh -c 'git filter-branch --prune-empty --subdirectory-filter $1 master' -
    human = name-rev --name-only --refs=refs/heads/*

  # Initalize a repo and immediate add an empty commit, which makes rebase easier
    init-empty = !"f() { git init && git commit --allow-empty --allow-empty-message --message ''; }; f"

  # Rename an alias
    rename-alias = "!f() { [ $# = 3 ] && [ $2 != $3 ] && [ ! -z \"$(git config $1 --get alias.$2)\" ] && [ -z \"$(git config $1 --get alias.$3)\" ] && git config $1 alias.$3 \"$(git config $1 --get alias.$2)\" && git config $1 --unset alias.$2 && return 0 || echo \"Usage: git rename-(local|global)-alias <alias existing name> <new alias name>\nThe alias you are going to rename must exist and new name must not exist.\" >&2 && return 1; };f"
    rename-global-alias = "!git rename-alias --global"
    rename-local-alias = "!git rename-alias --local"

  # How many commits ahead/behind
    behind = !git rev-list --left-only --count $(git bu)...HEAD
    ahead = !git rev-list --right-only --count $(git bu)...HEAD

  # Add all new and modified files to the index
    wip = !"git add --all; git ls-files --deleted -z | xargs -0 git rm; git commit --message=wip"
  # Restore the deleted files to the working tree
    unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"

  # Show log of files that have many changes
    churn = !"f() { git log --all --find-copies --find-renames --name-only --format='format:' \"$@\" | awk 'NF{a[$0]++}END{for(i in a){print a[i], i}}' | sort -rn;};f"

  # Show a specific format string and its number of log entries
    log-of-format-and-count = "!f() { format=\"$1\"; shift; git log $@ --format=oneline --format="$format" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort; }; f"
    log-of-count-and-format = "!f() { format=\"$1\"; shift; git log $@ --format=oneline --format="$format" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f"
  # Show the number of log entries by a specific format string and date format string
    log-of-format-and-count-with-date = "!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log $@ --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort -r; }; f"
    log-of-count-and-format-with-date = "!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log $@ --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f"
  # Show the number of log items by email
    log-of-email-and-count         = "!f() { git log-of-format-and-count \"%aE\" $@; }; f"
    log-of-count-and-email         = "!f() { git log-of-count-and-format \"%aE\" $@; }; f"
  # Show the number of log items by hour
    log-of-hour-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%dT%H\" $@ ; }; f"
    log-of-count-and-hour          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%dT%H\" $@ ; }; f"
  # Show the number of log items by day
    log-of-day-and-count           = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%d\" $@ ; }; f"
    log-of-count-and-day           = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%d\" $@ ; }; f"
  # Show the number of log items by week
    log-of-week-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y#%V\" $@; }; f"
    log-of-count-and-week          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y#%V\" $@; }; f"
  # Show the number of log items by month
    log-of-month-and-count         = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m\" $@ ; }; f"
    log-of-count-and-month         = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m\" $@ ; }; f"
  # Show the number of log items by year
    log-of-year-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y\" $@ ; }; f"
    log-of-count-and-year          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y\" $@ ; }; f"
  # Show the number of log items by hour of day
    log-of-hour-of-day-and-count   = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%H\" $@; }; f"
    log-of-count-and-hour-of-day   = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%H\" $@; }; f"
  # Show the number of log items by day of week
    log-of-day-of-week-and-count   = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%u\" $@; }; f"
    log-of-count-and-day-of-week   = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%u\" $@; }; f"
  # Show the number of log items by week of year
    log-of-week-of-year-and-count  = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%V\" $@; }; f"
    log-of-count-and-week-of-year  = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%V\" $@; }; f"
  # Print a helpful summary of some typical metrics
    summary = "!f() { \
    printf \"Summary of this branch...\n\"; \
    printf \"%s\n\" $(git rev-parse --abbrev-ref HEAD); \
    printf \"%s first commit timestamp\n\" $(git log --date-order --format=%cI | tail -1); \
    printf \"%s latest commit timestamp\n\" $(git log -1 --date-order --format=%cI); \
    printf \"%d commit count\n\" $(git rev-list --count HEAD); \
    printf \"%d date count\n\" $(git log --format=oneline --format=\"%ad\" --date=format:\"%Y-%m-%d\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
    printf \"%d tag count\n\" $(git tag | wc -l); \
    printf \"%d author count\n\" $(git log --format=oneline --format=\"%aE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
    printf \"%d committer count\n\" $(git log --format=oneline --format=\"%cE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
    printf \"%d local branch count\n\" $(git branch | grep -v \" -> \" | wc -l); \
    printf \"%d remote branch count\n\" $(git branch -r | grep -v \" -> \" | wc -l); \
    printf \"\nSummary of this directory...\n\"; \
    printf \"%s\n\" $(pwd); \
    printf \"%d file count via git ls-files\n\" $(git ls-files | wc -l); \
    printf \"%d file count via find command\n\" $(find . | wc -l); \
    printf \"%d disk usage\n\" $(du -s | awk '{print $1}'); \
    printf \"\nMost-active authors, with commit count and %%...\n\"; git log-of-count-and-email | head -7; \
    printf \"\nMost-active dates, with commit count and %%...\n\"; git log-of-count-and-day | head -7; \
    printf \"\nMost-active files, with churn count\n\"; git churn | head -7; \
    }; f"

##-- SHELL SCRIPTING --##
  # Get the top level directory name
    top-name = rev-parse --show-toplevel
  # Get the current branch name
    branch-name = rev-parse --abbrev-ref HEAD
  # Get the upstream branch name
    upstream-name = !git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)
  # Execute shell scripts. Git always runs scripts in the top directory.
  # For example "git exec pwd" will always show you the top directory.
    exec = ! exec
